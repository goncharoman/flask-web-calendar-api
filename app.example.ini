; before run remove comments
[uwsgi]
module = wsgi:app                   ; module that be run

strict = true                       ; strict mode
;http = :9000                       ; use built-in HTTP router / Loadbalanser and etc. of uWSGI (see: https://uwsgi-docs.readthedocs.io/en/latest/HTTP.html)
http-socket = 127.0.0.1:8000        ; bind to the specific UNIX/TCP socket using HTTP proto
enable-threads = true               ; enable Python threads support (if your app is used threading)
vacuum = true                       ; enable clean up temp files and unix-sockets
single-interpreter = true           ; use 1 interpreter in 1 process
need-app = true                     ; if uWSGI can not loaded module app will be failed
master = true                       ; master process (will respawn your processes when they die, managing features, logging)
stats = 127.0.0.1:9191              ; stats subsystem (uWSGIâ€™s internal statistics)
harakiri = 90                       ; force kill worker after 60 sec (killing zombie workers)
die-on-term = true                  ; shutdown uWSGI by SIGTERM

; logging
disable-logging = true              ; off detailed uWSGI logging
log-4xx = true                      ; but leave 4xx errors logging
log-5xx = true                      ; and 5xx errors

; workers recycling
max-requests = 1000                 ; restart worker after a specified number of requests 
max-worker-lifetime = 3600          ; restart worker after a specified number of seconds lifetime
reload-on-rss = 2048                ; restart worker after consuming the specified amount of memory
worker-reload-mercy = 60            ; waiting time before killing worker processes

; scaling
threads = 2                         ; 2 threads for each worker (process)
cheaper-algo = spare               ; scaling algo (in prod may be used busyness algo)
workers = 5                         ; maximum number of workers that can be spawned
cheaper = 2                         ; minimum number of workers to keep at all times
cheaper-initial = 2                 ; number of workers that will be started on start app
cheaper-overload = 1                ; cyclie in sec
cheaper-step = 1                    ; spawn at most 4 workers at once

; labeling
auto-procname = true
procname-prefix = "myapp "
